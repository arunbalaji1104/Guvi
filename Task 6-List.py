# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1qzaE1eclK-zmupiK7RjkgxusA7wu_Seh

1.) You have been given a Python List [10, 501, 22, 37, 100, 999, 87, 351] your task is to
create two List one which have all the Even Numbers and another List which will have all
the ODD numbers in it?
"""

def separate_even_odd(numbers):
    even_numbers = []
    odd_numbers = []
    for num in numbers:
        if num % 2 == 0:
            even_numbers.append(num)
        else:
            odd_numbers.append(num)
    return even_numbers, odd_numbers

# Given list
numbers = [10, 501, 22, 37, 100, 999, 87, 351]

# Separate even and odd numbers
even_nums, odd_nums = separate_even_odd(numbers)

# Print the lists of even and odd numbers
print("Even numbers:", even_nums)
print("Odd numbers:", odd_nums)

"""2.) Given a Python List [10, 501, 22, 37, 100, 999, 87, 351] your task is to Count all the
Prime Numbers and create a new Python List which will contain all the Prime Numbers
in it?
"""

def is_prime(num):
    if num <= 1:
        return False
    for i in range(2, int(num**0.5) + 1):
        if num % i == 0:
            return False
    return True

def find_prime_numbers(numbers):
    prime_numbers = []
    prime_count = 0
    for num in numbers:
        if is_prime(num):
            prime_numbers.append(num)
            prime_count += 1
    return prime_count, prime_numbers

# Given list
numbers = [10, 501, 22, 37, 100, 999, 87, 351]

# Find prime numbers
prime_count, prime_nums = find_prime_numbers(numbers)

# Print the count of prime numbers and the list of prime numbers
print("Count of prime numbers:", prime_count)
print("Prime numbers:", prime_nums)

"""3.) Given a Python List [10, 501, 22, 37, 100, 999, 87, 351] Find out how many numbers are
there in the given Python List which are Happy Numbers ?
"""

def is_happy_number(num):
    seen = set()
    while num != 1:
        num = sum(int(digit) ** 2 for digit in str(num))
        if num in seen:
            return False
        seen.add(num)
    return True

def count_happy_numbers(numbers):
    happy_count = 0
    for num in numbers:
        if is_happy_number(num):
            happy_count += 1
    return happy_count

# Given list
numbers = [10, 501, 22, 37, 100, 999, 87, 351]

# Count happy numbers
happy_count = count_happy_numbers(numbers)

# Print the count of happy numbers
print("Number of happy numbers:", happy_count)

"""4.) Write a python program to find the sum of the first and last digit of an integer ?"""

def sum_first_last_digit(number):
    # Convert the number to a string to easily access its digits
    number_str = str(number)
    # Extract the first and last digits
    first_digit = int(number_str[0])
    last_digit = int(number_str[-1])
    # Calculate the sum of the first and last digits
    sum_digits = first_digit + last_digit
    return sum_digits

# Input number
number = int(input("Enter an integer: "))

# Calculate and print the sum of the first and last digits
sum_digits = sum_first_last_digit(number)
print("Sum of the first and last digits:", sum_digits)

"""5.) You have been given a list of N integers which represents the number of
Mangoes in a bag. Each bag has a variable number of Mangoes. There are M
students in a Guvi class, your task is to distribute the Mangoes in such a way that each student gets one Bag. The difference between the number of Mangoes in a
bag with maximum Mangoes and Bag with minimum Mangoes given to the
student is minimum?
"""

def distribute_mangoes(mangoes, students):
    mangoes.sort()  # Sort the list of mangoes in non-decreasing order
    min_diff = float('inf')


    for i in range(len(mangoes) - students + 1):
        max_mangoes = mangoes[i + students - 1]  # Maximum mangoes assigned to a student
        min_mangoes = mangoes[i]  # Minimum mangoes assigned to a student
        diff = max_mangoes - min_mangoes  # Calculate the difference


        min_diff = min(min_diff, diff)

    return min_diff

# Example usage
mangoes = [3, 7, 2, 5, 8, 9, 4]
students = 3
min_difference = distribute_mangoes(mangoes, students)
print("Minimum difference between bags:", min_difference)

"""6.) You have been given three lists. Your task is to find the duplicates in the three
lists. Write a python program for the same. You can use your own python lists ?
"""

def find_duplicates(list1, list2, list3):
    # Convert lists to sets
    set1 = set(list1)
    set2 = set(list2)
    set3 = set(list3)

    # Find the intersection of the sets
    duplicates = set1.intersection(set2, set3)

    return list(duplicates)

# Example lists
list1 = [1, 2, 3, 4, 5]
list2 = [4, 5, 6, 7, 8]
list3 = [5, 6, 7, 8, 9]

# Find duplicates among the lists
duplicates = find_duplicates(list1, list2, list3)

# Print the duplicates
print("Duplicates:", duplicates)

"""7. Write a python program to find the first non-repeating elements in a given list of
integers ?
"""

def first_non_repeating_element(nums):
    count = {}  # Dictionary to store the count of each element
    first_non_repeating = None  # Initialize the variable to store the first non-repeating element

    for num in nums:
        if num in count:
            count[num] += 1
        else:
            count[num] = 1

    # Iterate through the list again to find the first non-repeating element
    for num in nums:
        if count[num] == 1:
            first_non_repeating = num
            break

    return first_non_repeating

# Example list
nums = [3, 5, 2, 5, 7, 3, 8, 8, 2]


result = first_non_repeating_element(nums)

if result is not None:
    print("The first non-repeating element is:", result)
else:
    print("There are no non-repeating elements in the list.")

"""8.) Write a python program to find the minimum element in a rated and sorted list?"""

def find_minimum_element(sorted_list):
    if sorted_list:
        return sorted_list[0]
    else:
        return None

# Example sorted list
sorted_list = [1, 3, 5, 7, 9, 11]


minimum_element = find_minimum_element(sorted_list)

if minimum_element is not None:
    print("Minimum element in the list:", minimum_element)
else:
    print("The list is empty.")

"""9.) You have been given a Python list [10,20,30,9] and a value of 59. Write a python
program to find the triplet in the list whose sum is equal to the given value?
"""

def find_triplet_with_sum(nums, target):
    n = len(nums)
    # Iterate through all possible triplets
    for i in range(n - 2):
        for j in range(i + 1, n - 1):
            for k in range(j + 1, n):
                if nums[i] + nums[j] + nums[k] == target:
                    return [nums[i], nums[j], nums[k]]
    return None

# Given list and target value
nums = [10, 20, 30, 9]
target = 59

# Find the triplet with sum equal to the target value
triplet = find_triplet_with_sum(nums, target)

if triplet:
    print("Triplet with sum", target, ":", triplet)
else:
    print("No triplet found with sum equal to", target)

"""10.) Given a list [4,2,-3,1,6] Write a python program to find if there is a sub-list with
sum equal to Zero ?
"""

def has_sublist_with_zero_sum(nums):
    prefix_sum_set = set()  # Set to store prefix sums

    # Initialize prefix sum and add 0 to the set (empty sublist has sum 0)
    prefix_sum = 0
    prefix_sum_set.add(prefix_sum)

    # Iterate through the list to calculate prefix sums
    for num in nums:
        prefix_sum += num
        # If prefix sum already exists in the set, sublist with sum 0 exists
        if prefix_sum in prefix_sum_set:
            return True
        prefix_sum_set.add(prefix_sum)

    return False

# Given list
nums = [4, 2, -3, 1, 6]

# Check if there is a sub-list with sum equal to zero
if has_sublist_with_zero_sum(nums):
    print("There is a sub-list with sum equal to zero.")
else:
    print("There is no sub-list with sum equal to zero.")